ğŸ”¹ document
ğŸ‘‰ O objeto document representa todo o conteÃºdo HTML carregado na pÃ¡gina.
Ã‰ a porta de entrada para interagir com os elementos HTML usando JavaScript.

ğŸ”¹ .querySelector("#search")
ğŸ‘‰ O mÃ©todo querySelector busca um elemento do DOM usando um seletor CSS.

ğŸ”¹ .addEventListener("submit", (event) => { ... })
ğŸ‘‰ Aqui estamos dizendo:
"Ei formulÃ¡rio, quero que vocÃª execute esta funÃ§Ã£o toda vez que alguÃ©m tentar te enviar"

"submit": Ã‰ o nome do evento que acontece quando o formulÃ¡rio Ã© enviado (por exemplo, pressionando Enter dentro do input).

(event) => { ... }: Ã‰ uma funÃ§Ã£o anÃ´nima (arrow function) que serÃ¡ chamada quando o evento acontecer.

event Ã© um objeto que representa o evento de envio e nos dÃ¡ acesso a mÃ©todos para controlÃ¡-lo.

ğŸ”¹ event.preventDefault();
ğŸ‘‰ Esse mÃ©todo Ã© ESSENCIAL quando vocÃª quer impedir o comportamento padrÃ£o de um formulÃ¡rio.

ğŸ§  Comportamento padrÃ£o de <form>:

Ao ser enviado, ele recarrega a pÃ¡gina (faz um request HTTP para a mesma pÃ¡gina ou outra URL, dependendo do action).

ğŸš« preventDefault() evita isso. Assim:

A pÃ¡gina nÃ£o recarrega.

Podemos tratar o envio com JavaScript (ex: fazer uma requisiÃ§Ã£o via fetch, validar, buscar dados, etc).